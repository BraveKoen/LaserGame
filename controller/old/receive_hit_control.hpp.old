#ifndef RECEIVE_HIT_CONTROL_HPP
#define RECEIVE_HIT_CONTROL_HPP

#include "hwlib.hpp"
#include "rtos.hpp"
#include "../entity/game_info.hpp"
#include "init_control.hpp"
#include "shot_control.hpp"
#include "../boundary/display.hpp"
#include "../boundary/buzzer.hpp"
#include <array>

class InitControl;

/// \brief
/// Class ReceiveHitControl keeps trach of lives and controls the Buzzer
/// \details
/// This class is for keeping track of the lives and that you can not shoot yourself.
class ReceiveHitControl : public rtos::task<>{

enum state_t {INACTIVE, ACTIVE};

private:
    GameInfo& gameInfo;
    InitControl& initControl;
    ShotControl& shotControl;
    Display& display;
    Buzzer buzzer;

    rtos::channel<std::array<uint8_t, 2>, 10> hitReceivedChannel;
    rtos::flag gameOverFlag;
    rtos::flag startFlag;

    state_t state = INACTIVE;
public:
    /// \brief
    /// Constructor ReceiveHitControl
    /// \details
    /// This constructor has gameInfo, shotControl and Display by reference.
    /// The constructor will also make buzzer with pin d9.
    /// hitReceivedChannel, gameOverFlag and startFlag are created.
    ReceiveHitControl(
        GameInfo& gameInfo,
        InitControl& initControl,
        ShotControl& shotControl,
        Display& display
    ):
        task("ReceiveHitControl"),
        gameInfo(gameInfo),
        initControl(initControl),
        shotControl(shotControl),
        display(display),
        buzzer(hwlib::target::pins::d9),
        hitReceivedChannel(this, "hitReceivedChannel"),
        gameOverFlag(this, "gameOverFlag"),
        startFlag(this, "startFlag")
    {
        initControl.setReceiveHitControl(this);
    } 
    /// \brief
    /// hitReceived uint8_t playerID, uint8_t damage: void
    /// \details
    /// The function write to hitReceivedChannel that it is hit by a player with the PlayerId and the damage.
    void hitReceived(uint8_t playerID, uint8_t damage){
        hitReceivedChannel.write({playerID, damage});
    }

    /// \brief
    /// gameOver is to set the flag
    /// \details
    /// will set the flag gameOverFlag.
    void gameOver(){
        gameOverFlag.set();
    }

    /// \brief
    /// start is to set the flag
    /// \details
    /// will set the flag startFlag.
    void start(){
        startFlag.set();
    }
private:
    /// \brief
    /// main RegisterControl
    /// \details
    /// case INACTIVE
    ///     Waits for startFlag to be set.
    ///     if startFlag is set it will set lives to 100, playerID to gameInfo.getPlayerID and STATE to ACTIVE.
    /// case ACTIVE
    ///     hitReceivedChannel will read when there is a new hit, how higher the damage how longer to buzzer will go off.
    ///     if lives is below 0 it will send a gameOverFlag and the state go in to INACTIVE
    void main(){
        int lives = 0;
        uint8_t playerID = 0;
        std::array<uint8_t, 2> hit = {0,0};
        for(;;){
            //hwlib::cout<<lives;
            switch(state){
                case INACTIVE:
                    wait(startFlag);
                    lives = 100;
                    display.displayMessage("\t002Lives:\t0003", lives);
                    playerID = gameInfo.getPlayerID();
                    state = ACTIVE;
                    break;
                case ACTIVE:
                    hit = hitReceivedChannel.read();
                    if(hit[0]==playerID){
                        break;
                    }else if((lives - hit[1]) <= 0){
                        // gameOverFlag.set(); // uhm... what??
                        shotControl.gameOver();
                        initControl.gameOver();
                        display.displayMessage("\t0002Lives:\t00030",0);
                        buzzer.playSound(1);
                        hwlib::wait_ms((hit[1]/20)*1000);
                        buzzer.playSound(0);
                        gameInfo.registerHit(hit[0], lives);
                        state = INACTIVE;
                        break;
                    }else{
                        lives -= hit[1];
                        gameInfo.registerHit(hit[0], hit[1]);
                        if(lives<10){
                            display.displayMessage("\t0002Lives:\t000300", lives);
                        }else if(lives<100){
                            display.displayMessage("\t0002Lives:\t00030", lives);
                        }else{
                            display.displayMessage("\t0002Lives:\t0003", lives);
                        }
                        buzzer.playSound(1);
                        hwlib::wait_ms((hit[1]/20)*1000);
                        buzzer.playSound(0);
                        break;
                    }
            }
        }
    }
};


#endif // RECEIVE_HIT_CONTROL_HPP
